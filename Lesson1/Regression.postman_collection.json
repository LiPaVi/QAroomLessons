{
	"info": {
		"_postman_id": "0989cbe7-df37-4327-bb03-da03d59c4cde",
		"name": "Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4682574"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "add_activity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
									"let id = 1;\r",
									"if (oldId) {\r",
									"    id = (oldId+ 1).toString()\r",
									"}\r",
									"\r",
									"const title = Util.getRandomString(Util.getRandomInt(60));\r",
									"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
									"const timeRange = 12 * 60;\r",
									"const time = Util.getRandomInt(timeRange);\r",
									"\r",
									"pm.collectionVariables.set(\"id\", id);\r",
									"pm.collectionVariables.set(\"title\", title);\r",
									"pm.collectionVariables.set(\"content\", content);\r",
									"pm.collectionVariables.set(\"time\", time);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//TODO: Rewrite these tests after fixing the response type\r",
									"\r",
									"// const responseText = pm.response.text();\r",
									"// pm.test(\"The response has id\", function () {\r",
									"//     pm.expect(responseText.includes(`Activity { id: ActivityId(\"${pm.collectionVariables.get('id')}\")`)).to.be.true\r",
									"// });\r",
									"\r",
									"// pm.test(\"The response has title\", function () {\r",
									"//     pm.expect(responseText.includes(pm.collectionVariables.get(\"title\"))).to.be.true\r",
									"// });\r",
									"\r",
									"// pm.test(\"The response has content\", function () {\r",
									"//     pm.expect(responseText.includes(pm.collectionVariables.get(\"content\"))).to.be.true\r",
									"// });\r",
									"\r",
									"// pm.test(\"The response has time\", function () {\r",
									"//     pm.expect(responseText.includes(pm.collectionVariables.get(\"time\"))).to.be.true\r",
									"// });\r",
									"\r",
									"// pm.test(\"Validate the activity object structure\", function () {\r",
									"//     const responseData = pm.response.text();\r",
									"    \r",
									"//     pm.expect(responseData).to.be.a('string').that.includes('Activity');\r",
									"    \r",
									"//     const activityRegex = /Activity\\s*{\\s*id:\\s*ActivityId\\(\"\\d+\"\\),\\s*title:\\s*\".+?\",\\s*content:\\s*\".+?\",\\s*time:\\s*\\d+\\s*}/;\r",
									"//     pm.expect(responseData).to.match(activityRegex, \"Response does not match the expected activity object structure\");\r",
									"// });\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": {{time}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_activity_added",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.collectionVariables.get(\"id\");\r",
									"const startPagination = parseInt(id) - 1;\r",
									"\r",
									"pm.collectionVariables.set(\"id\", id);\r",
									"pm.collectionVariables.set(\"startPagination\", startPagination);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The array length should be equal 1\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('array').that.has.lengthOf(1, \"Array length should be equal to 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'id'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('id');\r",
									"        pm.expect(activity.id).to.be.a('string');\r",
									"        pm.expect(activity.id).to.equal(String(pm.collectionVariables.get(\"id\")));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'title'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('title');\r",
									"        pm.expect(activity.title).to.be.a('string');\r",
									"        pm.expect(activity.title).to.equal(pm.collectionVariables.get(\"title\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'content'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('content');\r",
									"        pm.expect(activity.content).to.be.a('string');\r",
									"        pm.expect(activity.content).to.equal(pm.collectionVariables.get(\"content\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'time'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('time');\r",
									"        pm.expect(activity.time).to.be.a('number');\r",
									"        pm.expect(activity.time).to.equal(pm.collectionVariables.get(\"time\"));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/activities?start={{startPagination}}&end={{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "start",
									"value": "{{startPagination}}"
								},
								{
									"key": "end",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update_activity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let title = pm.collectionVariables.get(\"title\");\r",
									"let content = pm.collectionVariables.get(\"content\");\r",
									"let time = pm.collectionVariables.get(\"time\");\r",
									"\r",
									"title = Util.getRandomString(Util.getRandomInt(60));\r",
									"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
									"const timeRange = 12 * 60;\r",
									"time = Util.getRandomInt(timeRange);\r",
									"\r",
									"pm.collectionVariables.set(\"title\", title);\r",
									"pm.collectionVariables.set(\"content\", content);\r",
									"pm.collectionVariables.set(\"time\", time);\r",
									"\r",
									"// const fieldArray = [title, content, time];"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    // TODO: Delete this test after fixing response type\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.include(\"id\");\r",
									"    pm.expect(responseData).to.include(\"title\");\r",
									"    pm.expect(responseData).to.include(\"content\");\r",
									"    pm.expect(responseData).to.include(\"time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'id'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('id');\r",
									"        pm.expect(activity.id).to.be.a('string');\r",
									"        pm.expect(activity.id).to.equal(String(pm.collectionVariables.get(\"id\")));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'title'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('title');\r",
									"        pm.expect(activity.title).to.be.a('string');\r",
									"        pm.expect(activity.title).to.equal(pm.collectionVariables.get(\"title\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'content'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('content');\r",
									"        pm.expect(activity.content).to.be.a('string');\r",
									"        pm.expect(activity.content).to.equal(pm.collectionVariables.get(\"content\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'time'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('time');\r",
									"        pm.expect(activity.time).to.be.a('number');\r",
									"        pm.expect(activity.time).to.equal(pm.collectionVariables.get(\"time\"));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": {{time}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_activity_updated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.collectionVariables.get(\"id\");\r",
									"const startPagination = parseInt(id) - 1;\r",
									"\r",
									"pm.collectionVariables.set(\"id\", id);\r",
									"pm.collectionVariables.set(\"startPagination\", startPagination);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The array length should be equal 1\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('array').that.has.lengthOf(1, \"Array length should be equal to 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'id'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('id');\r",
									"        pm.expect(activity.id).to.be.a('string');\r",
									"        pm.expect(activity.id).to.equal(String(pm.collectionVariables.get(\"id\")));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'title'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('title');\r",
									"        pm.expect(activity.title).to.be.a('string');\r",
									"        pm.expect(activity.title).to.equal(pm.collectionVariables.get(\"title\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'content'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('content');\r",
									"        pm.expect(activity.content).to.be.a('string');\r",
									"        pm.expect(activity.content).to.equal(pm.collectionVariables.get(\"content\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'time'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('time');\r",
									"        pm.expect(activity.time).to.be.a('number');\r",
									"        pm.expect(activity.time).to.equal(pm.collectionVariables.get(\"time\"));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/activities?start={{startPagination}}&end={{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "start",
									"value": "{{startPagination}}"
								},
								{
									"key": "end",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add_time_spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const time = pm.collectionVariables.get(\"time\");\r",
									"const timeSpent = Util.getRandomInt(time);\r",
									"\r",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const timeSpentId = Util.getIntFromText(pm.response.text());\r",
									"pm.collectionVariables.set(\"timeSpentID\", timeSpentId);\r",
									"\r",
									"pm.test(\"Response contains the expected message format\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.be.a('string').that.includes('Time added with id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"time\": {{timeSpent}},\r\n    \"activity_id\": \"{{id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_time_spent_added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"//TODO: Rewrite these tests after fixing the response type\r",
									"const responseData = pm.response.text();\r",
									"\r",
									"pm.test(\"Response has required field timeSpentID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity was found [TimeSpent { id: TimeSpentId(\"${pm.collectionVariables.get('timeSpentID')}\")`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field time\", function () {\r",
									"    pm.expect(responseData).to.include(`time: ${pm.collectionVariables.get('timeSpent')}`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field activityID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity_id: ActivityId(\"${pm.collectionVariables.get('id')}\")`);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_activity_with_time_spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let title = pm.collectionVariables.get(\"title\");\r",
									"let content = pm.collectionVariables.get(\"content\");\r",
									"let time = pm.collectionVariables.get(\"time\");\r",
									"\r",
									"title = Util.getRandomString(Util.getRandomInt(60));\r",
									"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
									"const timeRange = 12 * 60;\r",
									"time = Util.getRandomInt(timeRange);\r",
									"\r",
									"pm.collectionVariables.set(\"title\", title);\r",
									"pm.collectionVariables.set(\"content\", content);\r",
									"pm.collectionVariables.set(\"time\", time);\r",
									"\r",
									"// const fieldArray = [title, content, time];"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    // TODO: Delete this test after fixing response type\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.include(\"id\");\r",
									"    pm.expect(responseData).to.include(\"title\");\r",
									"    pm.expect(responseData).to.include(\"content\");\r",
									"    pm.expect(responseData).to.include(\"time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'id'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('id');\r",
									"        pm.expect(activity.id).to.be.a('string');\r",
									"        pm.expect(activity.id).to.equal(String(pm.collectionVariables.get(\"id\")));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'title'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('title');\r",
									"        pm.expect(activity.title).to.be.a('string');\r",
									"        pm.expect(activity.title).to.equal(pm.collectionVariables.get(\"title\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'content'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('content');\r",
									"        pm.expect(activity.content).to.be.a('string');\r",
									"        pm.expect(activity.content).to.equal(pm.collectionVariables.get(\"content\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains field 'time'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    responseData.forEach(activity => {\r",
									"        pm.expect(activity).to.have.property('time');\r",
									"        pm.expect(activity.time).to.be.a('number');\r",
									"        pm.expect(activity.time).to.equal(pm.collectionVariables.get(\"time\"));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": {{time}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_time_spent_exists_after_updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"//TODO: Rewrite these tests after fixing the response type\r",
									"const responseData = pm.response.text();\r",
									"\r",
									"pm.test(\"Response has required field timeSpentID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity was found [TimeSpent { id: TimeSpentId(\"${pm.collectionVariables.get('timeSpentID')}\")`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field time\", function () {\r",
									"    pm.expect(responseData).to.include(`time: ${pm.collectionVariables.get('timeSpent')}`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field activityID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity_id: ActivityId(\"${pm.collectionVariables.get('id')}\")`);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_time_spent_more_than_exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const time = pm.collectionVariables.get(\"time\");\r",
									"const timeSpent = Util.getRandomInt(time) + time;\r",
									"\r",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"//TODO: Rewrite these tests after fixing response type\r",
									"\r",
									"const oldTimeSpentId = pm.collectionVariables.get(\"timeSpentID\");\r",
									"\r",
									"const timeSpentId = Util.getIntFromText(pm.response.text());\r",
									"pm.collectionVariables.set(\"timeSpentID\", timeSpentId);\r",
									"\r",
									"pm.test(\"Time spent ID was updated\", function () {\r",
									"    pm.expect(oldTimeSpentId !== timeSpentId).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the expected message format\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.be.a('string').that.includes('Time added with id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"time\": {{timeSpent}},\r\n    \"activity_id\": \"{{id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required words: Activity deleted\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.include(\"Activity deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_time_spent_exists_after_deleting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response type is JSON\", function () {\r",
									"     const responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"});\r",
									"\r",
									"//TODO: Rewrite these tests after fixing the response type\r",
									"const responseData = pm.response.text();\r",
									"\r",
									"pm.test(\"Response has required field timeSpentID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity was found [TimeSpent { id: TimeSpentId(\"${pm.collectionVariables.get('timeSpentID')}\")`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field time\", function () {\r",
									"    pm.expect(responseData).to.include(`time: ${pm.collectionVariables.get('timeSpent')}`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required field activityID\", function () {\r",
									"    pm.expect(responseData).to.include(`activity_id: ActivityId(\"${pm.collectionVariables.get('id')}\")`);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_time_spent_when_activity_not_exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const time = pm.collectionVariables.get(\"time\");\r",
									"const timeSpent = Util.getRandomInt(time) + time;\r",
									"\r",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the expected message format\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    pm.expect(responseData).to.be.a('string').that.includes('Activities not Found');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"time\": {{timeSpent}},\r\n    \"activity_id\": \"{{id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"Util = {}\r",
							"\r",
							"Util.getRandomString = (length) => {\r",
							"\r",
							"    let chars = \"abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\"\r",
							"    let charsLength = chars.length;\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result +=chars.charAt(Math.floor(Math.random() * charsLength));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"Util.getRandomInt = (max) => Math.floor(Math.random()* max);\r",
							"\r",
							"Util.getIntFromText = (string) => {\r",
							"    const regex = /\\d+/;\r",
							"    const match = string.match(regex);\r",
							"    return match[0]\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "AddActivity",
					"item": [
						{
							"name": "miss_one_field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
											"let id = 1;\r",
											"if (oldId) {\r",
											"    id = (oldId+ 1).toString()\r",
											"}\r",
											"\r",
											"const title = Util.getRandomString(Util.getRandomInt(60));\r",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"const time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing field id\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"missing field `id`\")).to.be.true\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    // \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": {{time}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "miss_two_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
											"let id = 1;\r",
											"if (oldId) {\r",
											"    id = (oldId+ 1).toString()\r",
											"}\r",
											"\r",
											"const title = Util.getRandomString(Util.getRandomInt(60));\r",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"const time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing field content\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"missing field `content`\")).to.be.true\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing field time\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"missing field `time`\")).to.be.true\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\"\r\n    //\"content\": \"{{content}}\",\r\n    //\"time\": {{time}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "miss_body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
											"let id = 1;\r",
											"if (oldId) {\r",
											"    id = (oldId+ 1).toString()\r",
											"}\r",
											"\r",
											"const title = Util.getRandomString(Util.getRandomInt(60));\r",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"const time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing body\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"EOF while parsing a value\")).to.be.true\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
											"let id = 1;\r",
											"if (oldId) {\r",
											"    id = (oldId+ 1).toString()\r",
											"}\r",
											"\r",
											"const title = Util.getRandomString(Util.getRandomInt(60));\r",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"const time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about wrong data type\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"invalid type: string\")).to.be.true\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": \"{{time}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong_body_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))\r",
											"let id = 1;\r",
											"if (oldId) {\r",
											"    id = (oldId+ 1).toString()\r",
											"}\r",
											"\r",
											"const title = Util.getRandomString(Util.getRandomInt(60));\r",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"const time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 415\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(415);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": \"{{time}}\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateActivity",
					"item": [
						{
							"name": "update_activity_with_empty_value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");\r",
											"let content = pm.collectionVariables.get(\"content\");\r",
											"let time = pm.collectionVariables.get(\"time\");\r",
											"\r",
											"title = Util.getRandomString(Util.getRandomInt(60));\r",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											"// const fieldArray = [title, content, time];"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has text about missing time field\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"\r",
											"    pm.expect(responseData).to.include(\"missing field `time`\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_activity_with_incorrect_value_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");\r",
											"let content = pm.collectionVariables.get(\"content\");\r",
											"let time = pm.collectionVariables.get(\"time\");\r",
											"\r",
											"title = Util.getRandomString(Util.getRandomInt(60));\r",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											"// const fieldArray = [title, content, time];"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has text about invalid data type\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"\r",
											"    pm.expect(responseData).to.include(\"invalid type: string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": \"{{time}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_activity_with_not_exist_body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");\r",
											"let content = pm.collectionVariables.get(\"content\");\r",
											"let time = pm.collectionVariables.get(\"time\");\r",
											"\r",
											"title = Util.getRandomString(Util.getRandomInt(60));\r",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											"// const fieldArray = [title, content, time];"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has text about body missing\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"\r",
											"    pm.expect(responseData).to.include(\"EOF while parsing a value\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_activity_with_wrong_body_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");\r",
											"let content = pm.collectionVariables.get(\"content\");\r",
											"let time = pm.collectionVariables.get(\"time\");\r",
											"\r",
											"title = Util.getRandomString(Util.getRandomInt(60));\r",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2,10)));\r",
											"const timeRange = 12 * 60;\r",
											"time = Util.getRandomInt(timeRange);\r",
											"\r",
											"pm.collectionVariables.set(\"title\", title);\r",
											"pm.collectionVariables.set(\"content\", content);\r",
											"pm.collectionVariables.set(\"time\", time);\r",
											"\r",
											"// const fieldArray = [title, content, time];"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 415\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(415);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"title\": \"{{title}}\",\r\n    \"content\": \"{{content}}\",\r\n    \"time\": {{time}}\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const id = parseInt(pm.collectionVariables.get(\"id\")) + 1;\r",
									"\r",
									"const reqBody = {\r",
									"    \"id\": `${id}`,\r",
									"    \"title\": `${Util.getRandomString(60)}`,\r",
									"    \"content\": `${Util.getRandomString(1024)}`,\r",
									"    \"time\": Util.getRandomInt(12 * 60)\r",
									"};\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${url}/activities`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'json',\r",
									"        raw: JSON.stringify(reqBody)\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    pm.test('response pre-request should be okay to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code',200);\r",
									"    })\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const url = pm.environment.get(\"url\");\r",
									"const id = parseInt(pm.collectionVariables.get(\"id\")) + 1;\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${url}/activities/${id}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    pm.test('response post-response should be okay to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code', 200);\r",
									"        })\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "DeleteActivity",
					"item": [
						{
							"name": "delete_not_existed_activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 416\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(416);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have text that activity not found\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData).to.be.a('string').that.includes('Activities not Found');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}+1",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}+1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_with_no_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_with_negative_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 416\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(416);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have text that activity not found\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    pm.expect(responseData).to.be.a('string').that.includes('Activities not Found');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"-1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AddTimeSpent",
					"item": [
						{
							"name": "time_spent_miss_field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const time = pm.collectionVariables.get(\"time\");\r",
											"const timeSpent = Util.getRandomInt(time);\r",
											"\r",
											"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing field time\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"missing field `time`\")).to.be.true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    // \"time\": {{timeSpent}},\r\n    \"activity_id\": \"{{id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "time_spent_miss_body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const time = pm.collectionVariables.get(\"time\");\r",
											"const timeSpent = Util.getRandomInt(time);\r",
											"\r",
											"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about empty body\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"EOF while parsing a value\")).to.be.true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "time_spent_wrong_id_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const time = pm.collectionVariables.get(\"time\");\r",
											"const timeSpent = Util.getRandomInt(time);\r",
											"\r",
											"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about invalid field data type\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"invalid type: integer\")).to.be.true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"time\": {{timeSpent}},\r\n    \"activity_id\": {{id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "time_spent_wrong_body_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const time = pm.collectionVariables.get(\"time\");\r",
											"const timeSpent = Util.getRandomInt(time);\r",
											"\r",
											"pm.collectionVariables.set(\"timeSpent\", timeSpent)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 415\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(415);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"time\": {{timeSpent}},\r\n    \"activity_id\": \"{{id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pagination",
					"item": [
						{
							"name": "pagination_start_bigger_than_end",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = pm.collectionVariables.get(\"id\");\r",
											"const startPagination = parseInt(id) - 1;\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"startPagination\", startPagination);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start={{id}}&end={{startPagination}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "{{id}}"
										},
										{
											"key": "end",
											"value": "{{startPagination}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "pagination_missing_parameter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = pm.collectionVariables.get(\"id\");\r",
											"const startPagination = parseInt(id) - 1;\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"startPagination\", startPagination);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about missing parameter\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"Missing parameter\")).to.be.true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start={{startPagination}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "{{startPagination}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "pagination_wrong_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = pm.collectionVariables.get(\"id\");\r",
											"const startPagination = parseInt(id) - 1;\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"startPagination\", startPagination);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about invalid type\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText.includes(\"invalid digit found\")).to.be.true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start={{id}}&end={{title}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "{{id}}"
										},
										{
											"key": "end",
											"value": "{{title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "pagination_start_equal_end",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = pm.collectionVariables.get(\"id\");\r",
											"const startPagination = parseInt(id) - 1;\r",
											"\r",
											"pm.collectionVariables.set(\"id\", id);\r",
											"pm.collectionVariables.set(\"startPagination\", startPagination);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 416\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(416);\r",
											"});\r",
											"\r",
											"pm.test(\"The response text should have information about invalid type\", function () {\r",
											" const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start={{id}}&end={{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "{{id}}"
										},
										{
											"key": "end",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"Util = {}\r",
							"\r",
							"Util.getRandomString = (length) => {\r",
							"\r",
							"    let chars = \"abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\"\r",
							"    let charsLength = chars.length;\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result +=chars.charAt(Math.floor(Math.random() * charsLength));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"Util.getRandomInt = (max) => Math.floor(Math.random()* max);\r",
							"\r",
							"Util.getIntFromText = (string) => {\r",
							"    const regex = /\\d+/;\r",
							"    const match = string.match(regex);\r",
							"    return match[0]\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "content",
			"value": ""
		},
		{
			"key": "time",
			"value": ""
		},
		{
			"key": "startPagination",
			"value": ""
		},
		{
			"key": "endPagination",
			"value": ""
		},
		{
			"key": "timeSpentID",
			"value": ""
		},
		{
			"key": "timeSpent",
			"value": ""
		}
	]
}